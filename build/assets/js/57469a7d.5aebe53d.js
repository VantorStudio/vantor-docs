"use strict";(self.webpackChunkvantor=self.webpackChunkvantor||[]).push([[2510],{3746:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>h});const o=JSON.parse('{"id":"core-concepts/the-object-system","title":"The Object System","description":"In commercial engines like Unreal Engine, you work with Entities that represent objects in your game or scene that you want to render or interact with. You can attach Components to these entities, where each entity can have multiple components, but only one of each type.","source":"@site/docs/core-concepts/the-object-system.mdx","sourceDirName":"core-concepts","slug":"/core-concepts/the-object-system","permalink":"/docs/core-concepts/the-object-system","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"id":"the-object-system","title":"The Object System","sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"A Basic Application","permalink":"/docs/core-concepts/a-basic-application"}}');var i=t(4848),a=t(8453);const r={id:"the-object-system",title:"The Object System",sidebar_position:2},s="Vantor's Object System",c={},h=[{value:"Core Concepts",id:"core-concepts",level:2},{value:"VObject",id:"vobject",level:3},{value:"VComponent",id:"vcomponent",level:3},{value:"VORegistry",id:"voregistry",level:3},{value:"Creating VObjects",id:"creating-vobjects",level:2},{value:"Working with VComponents",id:"working-with-vcomponents",level:2},{value:"Adding Components",id:"adding-components",level:3},{value:"Common VComponents",id:"common-vcomponents",level:3},{value:"Building Scene Hierarchies",id:"building-scene-hierarchies",level:2},{value:"Hierarchy Benefits",id:"hierarchy-benefits",level:3},{value:"Custom Components",id:"custom-components",level:3},{value:"Next Steps",id:"next-steps",level:2}];function l(e){const n={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"vantors-object-system",children:"Vantor's Object System"})}),"\n",(0,i.jsxs)(n.p,{children:["In commercial engines like Unreal Engine, you work with ",(0,i.jsx)(n.strong,{children:"Entities"})," that represent objects in your game or scene that you want to render or interact with. You can attach ",(0,i.jsx)(n.strong,{children:"Components"})," to these entities, where each entity can have multiple components, but only one of each type."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, a Camera (which is an Entity) can have both a ",(0,i.jsx)(n.code,{children:"TransformComponent"})," and a ",(0,i.jsx)(n.code,{children:"MeshComponent"})," simultaneously. The ",(0,i.jsx)(n.code,{children:"TransformComponent"})," handles the position and rotation of the camera, while the ",(0,i.jsx)(n.code,{children:"MeshComponent"})," provides the renderable representation of the camera, allowing you to visualize where it's located in the scene."]}),"\n",(0,i.jsx)(n.p,{children:"Vantor Engine follows a similar approach using its own custom-built object system with a registry to store and manage all objects efficiently."}),"\n",(0,i.jsxs)(n.admonition,{title:"Entity-Component-System (ECS)",type:"info",children:[(0,i.jsx)(n.p,{children:"Vantor's object system is based on the Entity-Component-System (ECS) architectural pattern, which provides:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Flexibility"}),": Easy to add, remove, and modify functionality"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Performance"}),": Efficient memory usage and cache-friendly data structures"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Modularity"}),": Clean separation of data and behavior"]}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"core-concepts",children:"Core Concepts"}),"\n",(0,i.jsx)(n.h3,{id:"vobject",children:"VObject"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"VObjects"})," are the fundamental entities in Vantor Engine. They represent any object in your game world and can be created using the ",(0,i.jsx)(n.code,{children:"VORegistry"})," (Vantor Object Registry)."]}),"\n",(0,i.jsx)(n.h3,{id:"vcomponent",children:"VComponent"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"VComponents"})," are the functional building blocks that can be attached to VObjects to provide specific capabilities like rendering, physics, audio, or custom game logic."]}),"\n",(0,i.jsx)(n.h3,{id:"voregistry",children:"VORegistry"}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.strong,{children:"Vantor Object Registry"})," manages the lifecycle of all VObjects, providing efficient creation, destruction, and lookup of entities."]}),"\n",(0,i.jsx)(n.h2,{id:"creating-vobjects",children:"Creating VObjects"}),"\n",(0,i.jsx)(n.p,{children:"We can create new VObject-derived entities and register them with the VORegistry. The registry handles memory management and provides unique identifiers for each object."}),"\n",(0,i.jsx)(n.p,{children:"Here's an example of creating a camera entity:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="Creating a Camera Entity"',children:'#include <Vantor/Vantor.hpp>\n\nint main() {\n    Vantor::VApplication app;\n\n    // Application creation data\n    Vantor::VApplicationCreateInfo appInfo;\n    appInfo.windowWidth = 1280;\n    appInfo.windowHeight = 720;\n    appInfo.windowTitle = "Object System Demo";\n\n    app.Initialize(appInfo);\n\n    // highlight-start\n    // Create a Camera object and position it at (1, 1, 1)\n    auto camera = Vantor::Object::VORegistry::CreateEntity<Vantor::Renderer::Camera>(\n        Vantor::Math::VVector3(1.0f, 1.0f, 1.0f)\n    );\n    // highlight-end\n\n    while (app.IsRunning()) {\n        app.BeginFrame();\n\n        // Game update and rendering logic goes here\n\n        app.EndFrame();\n    }\n\n    app.Shutdown();\n    return 0;\n} \n'})}),"\n",(0,i.jsxs)(n.admonition,{title:"Object Creation",type:"tip",children:[(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"CreateEntity<T>()"})," method is a template function that:"]}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Creates a new object of type T"}),"\n",(0,i.jsx)(n.li,{children:"Registers it with the VORegistry"}),"\n",(0,i.jsx)(n.li,{children:"Returns a shared pointer to the created object"}),"\n",(0,i.jsx)(n.li,{children:"Automatically handles memory management"}),"\n"]})]}),"\n",(0,i.jsx)(n.h2,{id:"working-with-vcomponents",children:"Working with VComponents"}),"\n",(0,i.jsx)(n.p,{children:"Components provide functionality to VObjects. Think of them as modular pieces that define what an object can do or what properties it has."}),"\n",(0,i.jsx)(n.h3,{id:"adding-components",children:"Adding Components"}),"\n",(0,i.jsx)(n.p,{children:"We can attach functionality to our objects through components. Each component serves a specific purpose and can be added dynamically at runtime."}),"\n",(0,i.jsxs)(n.p,{children:["Here's how to add a ",(0,i.jsx)(n.code,{children:"VTagComponent"})," to give your camera a name:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="Adding Components to Objects"',children:'#include <Vantor/Vantor.hpp>\n\nint main() {\n    Vantor::VApplication app;\n\n    // Application setup\n    Vantor::VApplicationCreateInfo appInfo;\n    appInfo.windowWidth = 1280;\n    appInfo.windowHeight = 720;\n    appInfo.windowTitle = "Component System Demo";\n\n    app.Initialize(appInfo);\n\n    // Create camera entity\n    auto camera = Vantor::Object::VORegistry::CreateEntity<Vantor::Renderer::Camera>(\n        Vantor::Math::VVector3(1.0f, 1.0f, 1.0f)\n    );\n\n    // highlight-start\n    // Add a TagComponent to identify our camera\n    camera->AddComponentVoid<Vantor::Object::VTagComponent>();\n    \n    // Configure the tag component with a name\n    auto tagComponent = camera->GetComponent<Vantor::Object::VTagComponent>();\n    tagComponent->SetName("MainCamera");\n    // highlight-end\n\n    while (app.IsRunning()) {\n        app.BeginFrame();\n\n        // highlight-start\n        // Example: Access the camera by its tag\n        std::string cameraName = tagComponent->GetName();\n        // Use the camera name for debugging or UI purposes\n        // highlight-end\n\n        app.EndFrame();\n    }\n\n    app.Shutdown();\n    return 0;\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"common-vcomponents",children:"Common VComponents"}),"\n",(0,i.jsx)(n.p,{children:"Vantor Engine provides several built-in components for common functionality:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{children:"Component"}),(0,i.jsx)(n.th,{children:"Purpose"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"VTagComponent"})}),(0,i.jsx)(n.td,{children:"Object identification and naming"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"VTransformComponent"})}),(0,i.jsx)(n.td,{children:"Position, rotation, and scale"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"VMeshComponent"})}),(0,i.jsx)(n.td,{children:"3D model rendering"})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:(0,i.jsx)(n.code,{children:"VMaterialComponent"})}),(0,i.jsx)(n.td,{children:"Adds Textures, Shaders, Color, ..."})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{children:"And more..."}),(0,i.jsx)(n.td,{})]})]})]}),"\n",(0,i.jsx)(n.admonition,{title:"Component Management",type:"note",children:(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"AddComponentVoid<T>()"})," to add a component of type T"]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"GetComponent<T>()"})," to retrieve an existing component"]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"HasComponent<T>()"})," to check if a component exists"]}),"\n",(0,i.jsxs)(n.li,{children:["Use ",(0,i.jsx)(n.code,{children:"RemoveComponent(T)"})," to remove a component"]}),"\n"]})}),"\n",(0,i.jsx)(n.h2,{id:"building-scene-hierarchies",children:"Building Scene Hierarchies"}),"\n",(0,i.jsx)(n.p,{children:"VObjects can be organized in hierarchical structures using parent-child relationships. This is essential for creating complex scenes where objects move together or inherit transformations."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="Creating Scene Hierarchies"',children:'// Create a root object for scene organization\nauto sceneRoot = Vantor::Object::VORegistry::CreateEntity<Vantor::Object::VObject>();\nsceneRoot->AddComponentVoid<Vantor::Object::VTagComponent>();\nsceneRoot->GetComponent<Vantor::Object::VTagComponent>()->SetName("SceneRoot");\n\n// highlight-start\n// Create a camera group\nauto cameraGroup = Vantor::Object::VORegistry::CreateEntity<Vantor::Object::VObject>();\ncameraGroup->AddComponentVoid<Vantor::Object::VTagComponent>();\ncameraGroup->GetComponent<Vantor::Object::VTagComponent>()->SetName("CameraGroup");\n\n// Add camera as a child of the camera group\ncameraGroup->AddChild(camera);\n\n// Add camera group as a child of the scene root\nsceneRoot->AddChild(cameraGroup);\n// highlight-end\n'})}),"\n",(0,i.jsx)(n.h3,{id:"hierarchy-benefits",children:"Hierarchy Benefits"}),"\n",(0,i.jsx)(n.p,{children:"When objects are arranged in a hierarchy:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Transform Inheritance"}),": Child objects inherit their parent's transformations"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Batch Operations"}),": Operations on parent objects affect all children"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Logical Organization"}),": Related objects can be grouped together"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Scene Management"}),": Easy to manage complex scenes with nested structures"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"custom-components",children:"Custom Components"}),"\n",(0,i.jsxs)(n.p,{children:["You can create your own components by inheriting from ",(0,i.jsx)(n.code,{children:"VComponent"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-cpp",metastring:'title="Custom Component Example"',children:"// highlight-start\nclass HealthComponent : public Vantor::Object::VComponent {\nprivate:\n    float health = 100.0f;\n    float maxHealth = 100.0f;\n\npublic:\n    explicit HealthComponent(Vantor::Object::VObject *owner) : Vantor::Object::VComponent(owner) {}\n\n    void SetHealth(float newHealth) { \n        health = std::clamp(newHealth, 0.0f, maxHealth); \n    }\n    \n    float GetHealth() const { return health; }\n    \n    bool IsAlive() const { return health > 0.0f; }\n    \n    void TakeDamage(float damage) {\n        SetHealth(health - damage);\n    }\n};\n\n// Usage\nauto player = Vantor::Object::VORegistry::CreateEntity<Vantor::Object::VObject>();\nplayer->AddComponentVoid<HealthComponent>();\nauto playerHealth = player->GetComponent<HealthComponent>();\nplayerHealth->TakeDamage(25.0f);\n// highlight-end\n"})}),"\n",(0,i.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsx)(n.p,{children:"Now that you understand Vantor's object system, explore the source code of the ObjectSystem here:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/LukasRennhofer/Vantor/blob/main/Vantor/Source/ObjectSystem/VOS_Object.hpp",children:"VObject Source Code"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/LukasRennhofer/Vantor/blob/main/Vantor/Source/ObjectSystem/Component/VOS_Component.hpp",children:"VComponent Source Code"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/LukasRennhofer/Vantor/blob/main/Vantor/Source/ObjectSystem/Register/VOS_Registry.hpp",children:"VORegistry Source Code"})}),"\n"]})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(l,{...e})}):l(e)}}}]);