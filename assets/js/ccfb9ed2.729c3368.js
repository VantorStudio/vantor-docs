"use strict";(self.webpackChunkvantor=self.webpackChunkvantor||[]).push([[7649],{8271:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>r,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"core-concepts/a-basic-application","title":"A Basic Application","description":"In this guide, we\'ll create our first Vantor Engine application that works cross-platform on all supported platforms using the same logic and just a few lines of C++ code.","source":"@site/docs/core-concepts/a-basic-application.mdx","sourceDirName":"core-concepts","slug":"/core-concepts/a-basic-application","permalink":"/docs/core-concepts/a-basic-application","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"a-basic-application","title":"A Basic Application","sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Core Concepts","permalink":"/docs/category/core-concepts"},"next":{"title":"The Object System","permalink":"/docs/core-concepts/the-object-system"}}');var a=i(4848),o=i(8453);const r={id:"a-basic-application",title:"A Basic Application",sidebar_position:1},s="A Basic Vantor Engine Application",c={},l=[{value:"Vantor&#39;s API Architecture",id:"vantors-api-architecture",level:2},{value:"Coding Our Application",id:"coding-our-application",level:2},{value:"What Just Happened?",id:"what-just-happened",level:2}];function p(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",mermaid:"mermaid",p:"p",pre:"pre",strong:"strong",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"a-basic-vantor-engine-application",children:"A Basic Vantor Engine Application"})}),"\n",(0,a.jsx)(n.p,{children:"In this guide, we'll create our first Vantor Engine application that works cross-platform on all supported platforms using the same logic and just a few lines of C++ code.\nFirst, let's examine how Vantor Engine's API is structured and how we can access it."}),"\n",(0,a.jsx)(n.h2,{id:"vantors-api-architecture",children:"Vantor's API Architecture"}),"\n",(0,a.jsx)(n.p,{children:"The Vantor Engine consists of three layers of API code, allowing us to choose the appropriate level for different use cases."}),"\n",(0,a.jsx)(n.mermaid,{value:"graph TD;\n    High-Level-Layer--\x3eMiddle-Level-Layer;\n    Middle-Level-Layer--\x3eLow-Level-Layer;"}),"\n",(0,a.jsxs)(n.p,{children:["We'll use the ",(0,a.jsx)(n.strong,{children:"High-Level Layer"}),", which is designed for indie developers and abstracts many of the complexities of cross-platform compatibility."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"Middle-Level Layer"})," provides objects that we can control directly, such as ",(0,a.jsx)(n.code,{children:"RenderPaths"})," or the ",(0,a.jsx)(n.code,{children:"RenderDevice"})," itself, allowing us to manipulate rendering behavior on different platforms."]}),"\n",(0,a.jsxs)(n.p,{children:["The ",(0,a.jsx)(n.strong,{children:"Low-Level Layer"})," is the abstraction and performance-critical layer that we can also control through custom engine modifications or when writing our own abstraction layers."]}),"\n",(0,a.jsx)(n.h2,{id:"coding-our-application",children:"Coding Our Application"}),"\n",(0,a.jsx)(n.p,{children:"We can use the High-Level API to create our own application and window context, allowing us to dive right into game development!"}),"\n",(0,a.jsx)(n.p,{children:"First, we'll include the engine's API in our code with a simple include statement:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",metastring:"title='main.cpp'",children:"#include <Vantor/Vantor.hpp>\n"})}),"\n",(0,a.jsx)(n.p,{children:"This statement includes all the core functionality we need to develop our Vantor Engine application."}),"\n",(0,a.jsxs)(n.p,{children:["Next, we'll create the main function and main loop, including our ",(0,a.jsx)(n.code,{children:"VApplication"})," object:"]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-cpp",metastring:"title='main.cpp'",children:'#include <Vantor/Vantor.hpp>\n\n// highlight-start\nint main() {\n    Vantor::VApplication app; // This is our VApplication object\n\n    // Application creation data (as a struct)\n    Vantor::VApplicationCreateInfo appInfo;\n    appInfo.windowWidth = 1280; // Window width\n    appInfo.windowHeight = 720; // Window height\n    appInfo.windowTitle = "MyVantorApplication"; // Window title\n\n    // Initialize the application\n    app.Initialize(appInfo);\n\n    // Run application logic\n    while (app.IsRunning()) {\n        app.BeginFrame();\n\n        // Here you will put your game\'s update and rendering logic\n\n        app.EndFrame();\n    }\n\n    app.Shutdown();\n\n    return 0;\n}\n// highlight-end\n'})}),"\n",(0,a.jsx)(n.p,{children:"When we build and run this code with CMake and Make, we'll see an empty black window with our specified window title!\nCongratulations! You've just created your first cross-platform application context with Vantor Engine! But there's much more to explore."}),"\n",(0,a.jsx)(n.h2,{id:"what-just-happened",children:"What Just Happened?"}),"\n",(0,a.jsxs)(n.p,{children:["In summary, we created a ",(0,a.jsx)(n.code,{children:"VApplication"})," object that requires initialization information (",(0,a.jsx)(n.code,{children:"VApplicationCreateInfo"}),") to be set up properly.\nBehind the scenes, the ",(0,a.jsx)(n.code,{children:"VApplication"})," handles input management, rendering setup, resource management, and much more, so we don't need to configure these systems manually."]}),"\n",(0,a.jsxs)(n.p,{children:["In the main loop, the application creates a new frame with ",(0,a.jsx)(n.code,{children:"BeginFrame()"})," and instructs the window context and render device to prepare a new frame for rendering while updating all objects and utilities that need to be refreshed each frame."]})]})}function d(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(p,{...e})}):p(e)}}}]);